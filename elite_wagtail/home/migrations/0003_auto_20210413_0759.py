# Generated by Django 2.1.15 on 2021-04-13 07:59

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import home.models
import home.routes
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailimages', '0001_squashed_0021'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('home', '0002_create_homepage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=5, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='广告标题')),
                ('title_zh_cn', models.CharField(max_length=5, null=True, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='广告标题')),
                ('title_en', models.CharField(max_length=5, null=True, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='广告标题')),
                ('update_id', models.UUIDField(blank=True)),
                ('raw_html', models.TextField(verbose_name='广告正文')),
                ('raw_html_zh_cn', models.TextField(null=True, verbose_name='广告正文')),
                ('raw_html_en', models.TextField(null=True, verbose_name='广告正文')),
                ('adv_status', models.IntegerField(choices=[(1, '只弹一次'), (2, '每天弹出一次'), (3, '每次打开页面弹一次')], default=1, verbose_name='广告弹窗频率')),
                ('adv_type', models.IntegerField(choices=[(1, 'GDPR要求的隐私声明'), (2, '特殊事项公告'), (3, '广告推送')], default=1, verbose_name='广告弹窗类型')),
                ('type3_url', models.URLField(blank=True, verbose_name='广告推送需要的链接')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('display_tags', models.BooleanField(default=True, verbose_name='Display tags')),
                ('num_entries_page', models.IntegerField(default=5, verbose_name='Entries per page')),
            ],
            options={
                'verbose_name': 'ArticleList',
            },
            bases=(home.routes.ArticleListRoutes, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('author_name', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(2)])),
                ('article_datetime', models.DateTimeField()),
                ('description', models.TextField(blank=True)),
                ('liked_count', models.IntegerField(default=0)),
                ('body', wagtail.core.fields.StreamField([('Paragraph', wagtail.core.blocks.RichTextBlock()), ('RawHTML', wagtail.core.blocks.RawHTMLBlock()), ('DocumentChooser', wagtail.documents.blocks.DocumentChooserBlock())])),
                ('article_cover', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('article_cover_app', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('author_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticlePageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='home.ArticlePage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_articlepagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaiduBridgeSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Your Baidu Bridge URL')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EliteVariableSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elite_filing_website', models.URLField(help_text='Your Elite Filing Website URL')),
                ('elite_case_number', models.CharField(help_text='Your Elite Case Number', max_length=32)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GoogleSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analytics_account', models.CharField(blank=True, help_text='Your Google Analytics Account, UA-xxxxx', max_length=127)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImportantPages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bridge_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.Page')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PopularArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=5, validators=[django.core.validators.MinLengthValidator(2)])),
                ('right_link', models.URLField(blank=True)),
                ('use_random_article', models.BooleanField(default=False)),
                ('random_num', models.IntegerField(default=3)),
                ('random_strategy', models.CharField(choices=[('liked', 'liked'), ('last_published_at', 'last_published_at')], default='liked', max_length=32)),
                ('selected_articles', models.ManyToManyField(blank=True, to='home.ArticlePage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PopularArticleSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_popular_articles', models.BooleanField(default=True, verbose_name='Display popular articles')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserFeedBack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.CharField(blank=True, max_length=500, null=True, verbose_name='图片')),
                ('nick_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='用户昵称')),
                ('content', models.TextField(verbose_name='反馈内容')),
                ('contact', models.CharField(blank=True, max_length=30, null=True, verbose_name='联系方式')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='提交时间')),
            ],
            options={
                'verbose_name': '用户反馈',
                'verbose_name_plural': '用户反馈',
            },
        ),
        migrations.AddField(
            model_name='homepage',
            name='body',
            field=wagtail.core.fields.StreamField([('Paragraph', wagtail.core.blocks.RichTextBlock()), ('Image', home.models.ImageChooserBlock()), ('OtherImgBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('fill_the_screen_or_nor', wagtail.core.blocks.BooleanBlock(label='是否撑满屏幕', required=False)), ('img_for_pc', home.models.ImageChooserBlock(label='PC端图片', required=True)), ('img_for_MOBILE', home.models.ImageChooserBlock(label='移动端图片', required=False)), ('link', wagtail.core.blocks.URLBlock(label='链接(非必填)', required=False))])), ('Text', wagtail.core.blocks.TextBlock()), ('Heading', wagtail.core.blocks.CharBlock()), ('BlockQuote', wagtail.core.blocks.BlockQuoteBlock()), ('Email', wagtail.core.blocks.EmailBlock()), ('URL', wagtail.core.blocks.URLBlock()), ('Boolean', wagtail.core.blocks.BooleanBlock()), ('Integer', wagtail.core.blocks.IntegerBlock()), ('Float', wagtail.core.blocks.FloatBlock()), ('Decimal', wagtail.core.blocks.DecimalBlock()), ('Date', wagtail.core.blocks.DateBlock()), ('Time', wagtail.core.blocks.TimeBlock()), ('DateTime', wagtail.core.blocks.DateTimeBlock()), ('RawHTML', wagtail.core.blocks.RawHTMLBlock()), ('Choice', wagtail.core.blocks.ChoiceBlock(choices=[])), ('PageChooser', wagtail.core.blocks.PageChooserBlock()), ('DocumentChooser', wagtail.documents.blocks.DocumentChooserBlock()), ('Banner', wagtail.core.blocks.StructBlock([('banners', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('mobile_image', home.models.ImageChooserBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('loop_time', wagtail.core.blocks.IntegerBlock(default=3000))])), ('Embed', wagtail.embeds.blocks.EmbedBlock()), ('RecommendCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('courses', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', home.models.CourseUrlBlock()), ('publicity_page_url', wagtail.core.blocks.URLBlock(required=False))])))], template='home/blocks/recommend_courses.html')), ('SeriesCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/series_list.html')), ('StoryBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('propaganda_image', home.models.ImageChooserBlock(label='宣传图片')), ('story', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('story_photo', wagtail.core.blocks.ListBlock(home.models.ImageChooserBlock(required=False), label='故事图片')), ('story_title', wagtail.core.blocks.CharBlock(label='故事标题', required=False)), ('story_content', wagtail.core.blocks.CharBlock(label='故事内容', required=False)), ('photo_location', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'left'), ('center', 'center')], icon='cup', label='图片位置')), ('story_link', wagtail.core.blocks.URLBlock(label='故事链接'))]), label='用户故事')), ('propaganda_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('ProfessorBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('professor_image', home.models.ImageChooserBlock(label='宣传图片')), ('professor', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='教授名称', required=False)), ('professor_pic', home.models.ImageChooserBlock(label='教授头像', required=False)), ('professor_link', wagtail.core.blocks.URLBlock(label='链接', required=False)), ('professor_degree', wagtail.core.blocks.ListBlock(wagtail.core.blocks.TextBlock(required=False), label='教授学历')), ('content', wagtail.core.blocks.CharBlock(label='内容', required=False))]), label='教授')), ('professor_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('CategoriesListBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(default='课程分类', label='模块标题')), ('categorieslist', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('categories_name', wagtail.core.blocks.RegexBlock(error_messages={'invalid': '只允许输入2到10位中英文字符'}, label='分类名称', regex='^[\\u4e00-\\u9fa5a-zA-Z]{2,10}$', required=True)), ('categories_link', wagtail.core.blocks.URLBlock(label='分类链接', required=True)), ('img_for_app', home.models.ImageChooserBlock(label='app显示图标', required=False))]), label='课程分类'))])), ('SubjectCourse', wagtail.core.blocks.StructBlock([('required_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('optional_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/subject_course.html')), ('VipBlock', wagtail.core.blocks.StructBlock([('background_image', home.models.ImageChooserBlock(label='背景图片')), ('background_cotent', wagtail.core.blocks.CharBlock(label='背景内容', required=False)), ('title', wagtail.core.blocks.CharBlock(label='标题')), ('background_link', wagtail.core.blocks.URLBlock(label='链接'))])), ('SeriesProcessBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('has_update_or_nor', wagtail.core.blocks.BooleanBlock(label='是否有敬请期待', required=False)), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('course_photo', home.models.ImageChooserBlock(label='课程图片', required=True)), ('title', wagtail.core.blocks.CharBlock(label='课程标题', required=True)), ('description', wagtail.core.blocks.CharBlock(label='课程描述', required=True)), ('link', wagtail.core.blocks.URLBlock(label='课程链接', required=True))]), label='课程路径'))]))], default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='homepage',
            name='body_en',
            field=wagtail.core.fields.StreamField([('Paragraph', wagtail.core.blocks.RichTextBlock()), ('Image', home.models.ImageChooserBlock()), ('OtherImgBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('fill_the_screen_or_nor', wagtail.core.blocks.BooleanBlock(label='是否撑满屏幕', required=False)), ('img_for_pc', home.models.ImageChooserBlock(label='PC端图片', required=True)), ('img_for_MOBILE', home.models.ImageChooserBlock(label='移动端图片', required=False)), ('link', wagtail.core.blocks.URLBlock(label='链接(非必填)', required=False))])), ('Text', wagtail.core.blocks.TextBlock()), ('Heading', wagtail.core.blocks.CharBlock()), ('BlockQuote', wagtail.core.blocks.BlockQuoteBlock()), ('Email', wagtail.core.blocks.EmailBlock()), ('URL', wagtail.core.blocks.URLBlock()), ('Boolean', wagtail.core.blocks.BooleanBlock()), ('Integer', wagtail.core.blocks.IntegerBlock()), ('Float', wagtail.core.blocks.FloatBlock()), ('Decimal', wagtail.core.blocks.DecimalBlock()), ('Date', wagtail.core.blocks.DateBlock()), ('Time', wagtail.core.blocks.TimeBlock()), ('DateTime', wagtail.core.blocks.DateTimeBlock()), ('RawHTML', wagtail.core.blocks.RawHTMLBlock()), ('Choice', wagtail.core.blocks.ChoiceBlock(choices=[])), ('PageChooser', wagtail.core.blocks.PageChooserBlock()), ('DocumentChooser', wagtail.documents.blocks.DocumentChooserBlock()), ('Banner', wagtail.core.blocks.StructBlock([('banners', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('mobile_image', home.models.ImageChooserBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('loop_time', wagtail.core.blocks.IntegerBlock(default=3000))])), ('Embed', wagtail.embeds.blocks.EmbedBlock()), ('RecommendCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('courses', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', home.models.CourseUrlBlock()), ('publicity_page_url', wagtail.core.blocks.URLBlock(required=False))])))], template='home/blocks/recommend_courses.html')), ('SeriesCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/series_list.html')), ('StoryBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('propaganda_image', home.models.ImageChooserBlock(label='宣传图片')), ('story', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('story_photo', wagtail.core.blocks.ListBlock(home.models.ImageChooserBlock(required=False), label='故事图片')), ('story_title', wagtail.core.blocks.CharBlock(label='故事标题', required=False)), ('story_content', wagtail.core.blocks.CharBlock(label='故事内容', required=False)), ('photo_location', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'left'), ('center', 'center')], icon='cup', label='图片位置')), ('story_link', wagtail.core.blocks.URLBlock(label='故事链接'))]), label='用户故事')), ('propaganda_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('ProfessorBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('professor_image', home.models.ImageChooserBlock(label='宣传图片')), ('professor', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='教授名称', required=False)), ('professor_pic', home.models.ImageChooserBlock(label='教授头像', required=False)), ('professor_link', wagtail.core.blocks.URLBlock(label='链接', required=False)), ('professor_degree', wagtail.core.blocks.ListBlock(wagtail.core.blocks.TextBlock(required=False), label='教授学历')), ('content', wagtail.core.blocks.CharBlock(label='内容', required=False))]), label='教授')), ('professor_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('CategoriesListBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(default='课程分类', label='模块标题')), ('categorieslist', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('categories_name', wagtail.core.blocks.RegexBlock(error_messages={'invalid': '只允许输入2到10位中英文字符'}, label='分类名称', regex='^[\\u4e00-\\u9fa5a-zA-Z]{2,10}$', required=True)), ('categories_link', wagtail.core.blocks.URLBlock(label='分类链接', required=True)), ('img_for_app', home.models.ImageChooserBlock(label='app显示图标', required=False))]), label='课程分类'))])), ('SubjectCourse', wagtail.core.blocks.StructBlock([('required_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('optional_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/subject_course.html')), ('VipBlock', wagtail.core.blocks.StructBlock([('background_image', home.models.ImageChooserBlock(label='背景图片')), ('background_cotent', wagtail.core.blocks.CharBlock(label='背景内容', required=False)), ('title', wagtail.core.blocks.CharBlock(label='标题')), ('background_link', wagtail.core.blocks.URLBlock(label='链接'))])), ('SeriesProcessBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('has_update_or_nor', wagtail.core.blocks.BooleanBlock(label='是否有敬请期待', required=False)), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('course_photo', home.models.ImageChooserBlock(label='课程图片', required=True)), ('title', wagtail.core.blocks.CharBlock(label='课程标题', required=True)), ('description', wagtail.core.blocks.CharBlock(label='课程描述', required=True)), ('link', wagtail.core.blocks.URLBlock(label='课程链接', required=True))]), label='课程路径'))]))], null=True),
        ),
        migrations.AddField(
            model_name='homepage',
            name='body_zh_cn',
            field=wagtail.core.fields.StreamField([('Paragraph', wagtail.core.blocks.RichTextBlock()), ('Image', home.models.ImageChooserBlock()), ('OtherImgBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('fill_the_screen_or_nor', wagtail.core.blocks.BooleanBlock(label='是否撑满屏幕', required=False)), ('img_for_pc', home.models.ImageChooserBlock(label='PC端图片', required=True)), ('img_for_MOBILE', home.models.ImageChooserBlock(label='移动端图片', required=False)), ('link', wagtail.core.blocks.URLBlock(label='链接(非必填)', required=False))])), ('Text', wagtail.core.blocks.TextBlock()), ('Heading', wagtail.core.blocks.CharBlock()), ('BlockQuote', wagtail.core.blocks.BlockQuoteBlock()), ('Email', wagtail.core.blocks.EmailBlock()), ('URL', wagtail.core.blocks.URLBlock()), ('Boolean', wagtail.core.blocks.BooleanBlock()), ('Integer', wagtail.core.blocks.IntegerBlock()), ('Float', wagtail.core.blocks.FloatBlock()), ('Decimal', wagtail.core.blocks.DecimalBlock()), ('Date', wagtail.core.blocks.DateBlock()), ('Time', wagtail.core.blocks.TimeBlock()), ('DateTime', wagtail.core.blocks.DateTimeBlock()), ('RawHTML', wagtail.core.blocks.RawHTMLBlock()), ('Choice', wagtail.core.blocks.ChoiceBlock(choices=[])), ('PageChooser', wagtail.core.blocks.PageChooserBlock()), ('DocumentChooser', wagtail.documents.blocks.DocumentChooserBlock()), ('Banner', wagtail.core.blocks.StructBlock([('banners', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('mobile_image', home.models.ImageChooserBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('loop_time', wagtail.core.blocks.IntegerBlock(default=3000))])), ('Embed', wagtail.embeds.blocks.EmbedBlock()), ('RecommendCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('courses', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', home.models.CourseUrlBlock()), ('publicity_page_url', wagtail.core.blocks.URLBlock(required=False))])))], template='home/blocks/recommend_courses.html')), ('SeriesCourse', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/series_list.html')), ('StoryBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('propaganda_image', home.models.ImageChooserBlock(label='宣传图片')), ('story', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('story_photo', wagtail.core.blocks.ListBlock(home.models.ImageChooserBlock(required=False), label='故事图片')), ('story_title', wagtail.core.blocks.CharBlock(label='故事标题', required=False)), ('story_content', wagtail.core.blocks.CharBlock(label='故事内容', required=False)), ('photo_location', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'left'), ('center', 'center')], icon='cup', label='图片位置')), ('story_link', wagtail.core.blocks.URLBlock(label='故事链接'))]), label='用户故事')), ('propaganda_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('ProfessorBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('professor_image', home.models.ImageChooserBlock(label='宣传图片')), ('professor', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='教授名称', required=False)), ('professor_pic', home.models.ImageChooserBlock(label='教授头像', required=False)), ('professor_link', wagtail.core.blocks.URLBlock(label='链接', required=False)), ('professor_degree', wagtail.core.blocks.ListBlock(wagtail.core.blocks.TextBlock(required=False), label='教授学历')), ('content', wagtail.core.blocks.CharBlock(label='内容', required=False))]), label='教授')), ('professor_link', wagtail.core.blocks.URLBlock(label='宣传链接'))])), ('CategoriesListBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(default='课程分类', label='模块标题')), ('categorieslist', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('categories_name', wagtail.core.blocks.RegexBlock(error_messages={'invalid': '只允许输入2到10位中英文字符'}, label='分类名称', regex='^[\\u4e00-\\u9fa5a-zA-Z]{2,10}$', required=True)), ('categories_link', wagtail.core.blocks.URLBlock(label='分类链接', required=True)), ('img_for_app', home.models.ImageChooserBlock(label='app显示图标', required=False))]), label='课程分类'))])), ('SubjectCourse', wagtail.core.blocks.StructBlock([('required_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())]))), ('optional_course', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', home.models.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('link', wagtail.core.blocks.URLBlock())])))], template='home/blocks/subject_course.html')), ('VipBlock', wagtail.core.blocks.StructBlock([('background_image', home.models.ImageChooserBlock(label='背景图片')), ('background_cotent', wagtail.core.blocks.CharBlock(label='背景内容', required=False)), ('title', wagtail.core.blocks.CharBlock(label='标题')), ('background_link', wagtail.core.blocks.URLBlock(label='链接'))])), ('SeriesProcessBlock', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='模块标题')), ('has_update_or_nor', wagtail.core.blocks.BooleanBlock(label='是否有敬请期待', required=False)), ('series', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('course_photo', home.models.ImageChooserBlock(label='课程图片', required=True)), ('title', wagtail.core.blocks.CharBlock(label='课程标题', required=True)), ('description', wagtail.core.blocks.CharBlock(label='课程描述', required=True)), ('link', wagtail.core.blocks.URLBlock(label='课程链接', required=True))]), label='课程路径'))]))], null=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='home.ArticlePageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='advert',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.Advert'),
        ),
    ]
